# Prepare K8s env using KOPS

Prerequesites:
1) Download kops binary and grant permition:
```
    curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
    chmod +x kops-linux-amd64
    sudo mv kops-linux-amd64 /usr/local/bin/kops
    kops version
```

2) IAM user: Since kops would create and build several AWS service components together for you, you must have an IAM user with kops required permissions. We have created an IAM user named chap6 in the previous section that has the following policies with the necessary permissions for kops:

- AmazonEC2FullAccess 
- AmazonRoute53FullAccess 
- AmazonS3FullAccess 
- IAMFullAccess 
- AmazonVPCFullAccess

Then, exposing the AWS access key ID and secret key as environment variables can make this role applied on host while firing kops commands:
```
    export AWS_ACCESS_KEY_ID=${string of 20 capital character combination}
    export AWS_SECRET_ACCESS_KEY=${string of 40 character and number combination}
```
OR attach the role on KOPS Bastion instance

3) Prepare an S3 bucket for storing cluster configuration: In our demonstration later, the S3 bucket name will be kubernetes-cookbook.
4) Prepare a Route53 DNS domain for accessing points of cluster: In our demonstration later, the domain name we use will be  private DNS zone "wkfusion.com".



Run command to create
```
    kops create cluster --name my-kops-cluster.wkfusion.com --state=s3://kops-bucket-ferda234 --zones eu-central-1c --cloud aws --network-cidr 10.10.0.0/16 --master-size t2.large --node-size t2.medium --node-count 2 --networking calico --topology private --dns private --dns-zone wkfusion.com --ssh-public-key ~/.ssh/EU_Frankfurt.pub --bastion --yes
```

Run command to delete
```
    kops delete cluster --name my-kops-cluster.wkfusion.com  --state=s3://kops-bucket-ferda234 --yes
```